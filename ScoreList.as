package  {	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;		public class ScoreList extends Sprite {				private var _scoreSprite:Sprite;		private var _page:uint = 1;		private var _totalpages:uint;		private var _loaded:uint;		private var _forward:Boolean = true;		public function ScoreList() {			addChild(Static.bitmap(new Smallframe()));			makeScoreSprite();			loadScores();			backToMenuButton();		}				private function makeScoreSprite():void {			_scoreSprite = new Sprite();			_scoreSprite.x = (200 / 2) - (_scoreSprite.width / 2);			_scoreSprite.y = 100;			addChild(_scoreSprite);						var forward:TextField = Static.textField('->', 36);			forward.x = 440;			forward.y = 200;			addChild(forward);			forward.addEventListener(MouseEvent.CLICK, handleForward);						var backward:TextField = Static.textField('<-', 36);			backward.x = 15;			backward.y = 200;			addChild(backward);			backward.addEventListener(MouseEvent.CLICK, handleBackward);		}				private function handleBackward(e:MouseEvent):void {			if(!(_page <= 1)) {				_forward = false;				removeChild(_scoreSprite);				var i:int = _scoreSprite.numChildren;				while(i--) _scoreSprite.removeChildAt(i);				_page -= 1;				loadScores();			}					}				private function handleForward(e:MouseEvent):void {			if(!(_page >= _totalpages)) {				_forward = true;				removeChild(_scoreSprite);				var i:int = _scoreSprite.numChildren;				while( i -- ) _scoreSprite.removeChildAt( i );				_page += 1;				loadScores();			}					}				private function loadScores():void {			var url:String = Static.scoreURL; //http://localhost/scores.php			var variables:URLVariables = new URLVariables('page=' + _page);			var req:URLRequest = new URLRequest(url);			req.method = 'GET';			req.data = variables;						var loader:URLLoader = new URLLoader();			loader.load(req);						loader.addEventListener(Event.COMPLETE, loadComplete);			loader.addEventListener(IOErrorEvent.IO_ERROR, handleError);		}				private function loadComplete(e:Event):void {			var xmlScores:XML = new XML(e.target.data);			_totalpages = xmlScores.total;			if(_forward != true) _loaded = (_page * 10) - 10;			for(var i:uint; i < xmlScores.score.length(); i++) {				_loaded++;				displayScores(xmlScores.score[i].@place,xmlScores.score[i].@name, xmlScores.score[i].@score);							}						addChild(_scoreSprite);		}				private function displayScores(place:int, name:String, score:String):void {						var place_tf:TextField = Static.textField((_loaded).toString() + '.');			place_tf.x = 0;			place_tf.y = 30 * place;			_scoreSprite.addChild(place_tf);						var name_tf:TextField = Static.textField(name);			name_tf.x = 40;			name_tf.y = 30 * place;			_scoreSprite.addChild(name_tf);						var score_tf:TextField = Static.textField(score);			score_tf.x = 230;			score_tf.y = 30 * place;			_scoreSprite.addChild(score_tf);					}				private function handleError(e:Event):void {			//please make sure that the reference to score.php in Static.as is correct as per my instructions in README.txt			trace("An error?");		}				private function backToMenuButton():void {			var back:TextField = new TextField();			var textFormat:TextFormat = Static.textFormat;			textFormat.color = 0xFFFFFF;			back.defaultTextFormat = textFormat;			back.text = 'Back to menu';			back.autoSize = 'center';			back.selectable = false;			back.x = (500 / 2) - (back.width / 2);			back.y = 430;			back.addEventListener(MouseEvent.CLICK, menuBackClick);			addChild(back);		}				private function menuBackClick(e:MouseEvent):void {			dispatchEvent(new Event('menuBackClick'));		}	}	}